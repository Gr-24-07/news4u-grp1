datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    USER
    EDITOR
    ADMIN
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String        @unique
    emailVerified DateTime?
    image         String?
    password      String
    role          Role          @default(USER)
    firstName     String?
    lastName      String?
    dateOfBirth   DateTime?
    newsletter    Boolean       @default(false)
    subscription  Subscription?
    articles      Article[]
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Article {
    id            String  @id @default(uuid())
    headline      String
    summary       String
    content       String
    views         Int     @default(0)
    image         String
    paid          Boolean @default(true)
    editorsChoice Boolean @default(false)

    category Category[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author User   @relation(fields: [userId], references: [id])
    userId String
}

model Category {
    id   String @id @default(uuid())
    name String @unique

    articles Article[]
}

model Subscription {
    id String @id @default(uuid())

    priceInCents Int
    createdAt    DateTime @default(now())
    expiresAt    DateTime
    cancelledAt  DateTime?
    status       String   @default("ACTIVE")
    user         User     @relation(fields: [userId], references: [id])
    userId       String   @unique
    autoRenew    Boolean  @default(true)

    subscriptionType   SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])
    subscriptionTypeId String
}

model SubscriptionType {
    id                String         @id @default(uuid())
    name              String
    description       String
    slug              String         @unique
    priceInCents      Int
    durationInSeconds Int
    subscriptions     Subscription[]
}
